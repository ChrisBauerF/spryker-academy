define({"206":{i:0.00117422310112151,u:"../developing_with_spryker/3rd-party_integration/payone/integration_payment_payone_invoice.html",a:"Front-end Integration\n To adjust the frontend appearance, provide the following templates in your theme directory:\n\nsrc/\u003cproject_name\u003e/Yves/Payone/Theme/\u003ccustom_theme_name\u003e/invoice.twig State Machine Integration\n Payone module provides a demo state machine for the Invoice payment method which ...",t:"Invoice Payment - Payone"},"207":{i:0.00117422310112151,u:"../developing_with_spryker/3rd-party_integration/payone/integration_payment_payone_state_machine_cmd_cond_evnt.html",a:"State Machine Commands, Conditions and Events - Payone",t:"State Machine Commands, Conditions and Events - Payone"},"208":{i:0.00117422310112151,u:"../developing_with_spryker/3rd-party_integration/payone/integration_payment_payone_facade.html",a:"Payone Facade  ",t:"Payone Facade"},"209":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/econda/integration_monitoring_econda.html",a:"BETA version\n This module is still in development and for the moment is only available as beta version and non-dist repository. econda is one of the leading providers for Analytics and Personalization Solutions in the European market. Our econda moduleoffers integration with these services. ...",t:"Monitoring Integration - econda (BETA)"},"210":{i:0.00123852020649587,u:"../developing_with_spryker/3rd-party_integration/econda/integration_monitoring_econda_export_csvs.html",a:"Exporting CSVs to econda\n Output folder\n We need to define output folder where we Zed is going to generate the CSV files. This is done by adding a line in your config.\n\n \u003c?php\n$config[EcondaConstants::ECONDA_CSV_FOLDER_PATH] = APPLICATION_ROOT_DIR . \u0027/path/to/generated/csv/files\u0027;\n Zed needs must ...",t:"Exporting CSVs to econda\n"},"211":{i:0.00123852020649587,u:"../developing_with_spryker/3rd-party_integration/econda/integration_monitoring_econda_tracking.html",a:"Prerequisites\n To enable econda tracking for your application, you need to download a personalized JavaScript library from the econda Analytics Configuration menu (you can find detailed instructions on this on  https://support.econda.de/display/MONDE/Tracking-Bibliothek+herunterladen ).\n\n These ...",t:"Tracking - econda"},"212":{i:0.00123852020649587,u:"../developing_with_spryker/3rd-party_integration/econda/integration_monitoring_econda_cross_sell.html",a:"Prerequisites\n The  econda JS SDK  download\n\n An econda id found in your account details (see image below).\n These instructions assume  you are using  Antelope  for your Yves assets management. If your project uses other frontend automation you can still use the instructions as guidelines.  Before ...",t:"Cross Sell - econda"},"213":{i:0.00108855604812676,u:"../developing_with_spryker/3rd-party_integration/integration_heroku.html",a:"This article describes the aspects you need to consider when using Heroku as an application hosting solution.\n\n In the scenario described below, 3 applications will be sharing the Redis, Elasticsearch and database add-ons between them.\n\n Applications\n Heroku Configuration Variables\n Configuration\n ...",t:"Application Hosting with Heroku"},"214":{i:0.00121796584720883,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay.html",a:"Amazon pay is a solution which allows buyers to make purchases via their Amazon accounts. Basically it consists of client side tools (widget, javascripts etc) and Amazon API with SDKs written for different programming languages (PHP, Python, Ruby, Java, C#). Client side tools are used for displaying ...",t:"Payment Integration - Amazon Pay"},"215":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_configuration.html",a:"To setup the Amazon Pay initial configuration, use the credentials you received after registering as an Amazon seller: $config[AmazonpayConstants::CLIENT_ID] = \u0027amzn1.application-oa2-client.someclientid\u0027;\n \n$config[AmazonpayConstants::CLIENT_SECRET] = ...",t:"Amazon Pay - Configuration"},"216":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_rendering_pay.html",a:"Usually the checkout page includes information for the buyer to review, items in the cart, prices, total price information and some other order related details. From this page, the buyer can proceed to checkout buy clicking a related GUI element (for example hyperlink or button). Amazon Pay provides ...",t:"Rendering a \"Pay with Amazon\" button on the cart page"},"217":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_order_ref_info.html",a:"After successful authorization, a buyer will be redirected to an order details page to enter all the information necessary for placing an order: address of shipment, payment method, delivery method and some calculations about taxes, possible discounts, delivery cost, etc. Amazon Pay provides ...",t:"Obtaining an Amazon Order Reference and Information about Shipping Addresses."},"218":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_api.html",a:"So far we discussed the client side implementation provided by Amazon Pay. On the Spryker OS side, the moduleprovides tools for rendering Amazon Pay widgets. This is shop specific and therefore is always implemented on a project level. Another part of the implementation is the Amazon Pay API ...",t:"Amazon Pay API"},"219":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_refund.html",a:"After successful authorization and capture processes order receives status \"capture completed\". From this state only one operation is possible and it is Refund. Refund can be partial if more than one item set to refund or full. Amazon only requires the amount of money which has to be refunded and ...",t:"Amazon Pay - Refund"},"220":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_state_machine.html",a:"Amazon Pay - State Machine The state machine is different for synchronous and asynchronous flow. Although from status \"capture completed\" it is absolutely same and in the state machine it\u0027s presented as a sub-process. State machine for the synchronous flow State machine for the asynchronous flow",t:"Amazon Pay - State Machine"},"221":{i:0.00118797301553501,u:"../developing_with_spryker/3rd-party_integration/amazonpay/integration_payment_amazon_pay_simulations.html",a:"In order to reproduce some edge cases like declined payment or pending capture Amazon provides two solutions. First is special methods marked with red star on payment widget. It allows to reproduce different cases of decline payment workflow. But there are more edge cases like expired authorisation ...",t:"Amazon Pay Sandbox Simulations"},"222":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/billpay/integration_payment_billpay.html",a:"BETA version\n This module is still in development and for the moment is only available as beta version and non-dist repository. Billpay is one of the leading payment providers in the European market. Our Billapy module offers integration with this service.  Prerequisites To use Billpay, you will ...",t:"Payment Integration - Billpay (BETA)"},"223":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/billpay/integration_payment_billpay_integration.html",a:"Billpay offers multiple payment methods (Invoice, Direct Debit, PayLater, Instalment). Availability of payment methods differs from country to country. Please contact Billpay directly or visit the Billpay website ( https://www.billpay.de/en/business-clients/merchant-request/ ) for details. The ...",t:"Billpay Integration"},"224":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/billpay/integration_payment_billpay_payment_methods.html",a:"Refer to Billpay payment information ( https://www.billpay.de/en/business-clients/payment-information/ )for information about payment methods. Using the “prescore” scoring model, the identity and credit check is performed before the payment method is selected. The results of the check are then used ...",t:"Billpay Invoice Payment with Prescoring"},"225":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/integration_payment_braintree.html",a:"BETA version\n This module is still in development and for the moment is only available as beta version and non-dist repository. Braintree provides two methods of payment:\n\n PayPal Credit Card To integrate Braintree payments, you need to create and configure a Braintree merchant account.\n\n There are ...",t:"Payment Integration - Braintree (BETA)"},"226":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/integration_payment_klarna.html",a:"BETA version\n This module is still in development and for the moment is only available as beta version and non-dist repository. The Klarna module provides two methods of payment:\n\n Part Payment – Flexible\n Invoice – pay in 14 days\n To Integrate Klarna payments, create and configure a Klarna merchant ...",t:"Payment Integration  - Klarna"},"227":{i:0.00108855604812676,u:"../developing_with_spryker/3rd-party_integration/integration_payment_payolution.html",a:"Payolution provides two methods of payment:\n\n Invoice \nInstallment\n In order to integrate Payolution payments, a Payolution merchant account should be created and configuration data then could be obtained from Payolution. There are two types of accounts for the integration: test and live accounts. ...",t:"Payment Integration - Payolution"},"228":{i:0.00725615281871316,u:"../developing_with_spryker/3rd-party_integration/integration_queue_rabbitmq.html",a:"Queues are used for managing asynchronous processing. They are ideal for handling background processes and batch imports. The default Queue management system shipped with the  DevVM is RabbitMQ.\n \nYou can install and use any other queue handler. For information on how to work with RabbitMQ, see the  ...",t:"Queue Integration - RabbitMQ"},"229":{i:0.00195834816666759,u:"../developing_with_spryker/3rd-party_integration/factfinder/integration_search_factfinder.html",a:"BETA version\n This module is still in development and for the moment is only available as beta version and non-dist repository. Prerequisites\n\n To integrate with FACT-Finder you will need your FACT-Finder account. If you do not have a FACT-Finder account please contact  FACT-Finder .\n\n  ...",t:"Search Integration - Fact Finder (BETA)"},"230":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/factfinder/integration_search_factfinder_export_csv.html",a:"Output folder  Define an output folder in which to generate the CSV files.  Adding the following line in your config: \u003c?php\n$config[FactFinderSdkConstants::CSV_DIRECTORY] = APPLICATION_ROOT_DIR . \u0027/path/to/generated/csv/files\u0027; Zed must have Read/Write access to it because in this folder we will ...",t:"Exporting CSVs to FACT-Finder"},"231":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/factfinder/integration_search_factfinder_tracking.html",a:"Prerequisites Tracking information lets the FACT-Finder Search tool automatically learn from user behavior. The data provided through this interface can be used for a variety of purposes. These include the tracking of events such as users clicking on a detail page, placing a product into the ...",t:"Fact-Finder - Tracking"},"232":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/factfinder/integration_search_factfinder_search.html",a:"Prerequisites  FACT-Finder suggests error-tolerant onsite search. The online shop’s search function is its most powerful sales tool.  FACT-Finder delivers relevant results even when spelling errors and typos occur.   Usage  By default, you can use the /fact-finder route to see an example catalog ...",t:"Fact-Finder - Search"},"233":{i:0.00105856321645294,u:"../developing_with_spryker/3rd-party_integration/factfinder/integration_search_factfinder_suggest.html",a:"Prerequisites  The FACT-Finder Suggest module enables you to provide customers with suggested search terms while they are entering a search term. In this way, users do not necessarily have to enter the entire search term themselves, but can choose a suggestion. As they are presented with similar ...",t:"Fact-Finder - Suggest"},"234":{i:0.00108855604812676,u:"../developing_with_spryker/guidelines/developer_guidelines.html",a:"The developer Guidelines section is a collection of best practices and guidelines for developers.    To navigate through content, click on an option from the right-hand table of contents or use the search (above).  You can also use the back/next buttons to move between items under the same category. ...",t:"Developer Guidelines"},"235":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/search_design_paterns.html",a:" Search Design Patterns for E-Commerce: Schema Structure, Data Driven Ranking \u0026 More Source:  http://project-a.github.io/on-site-search-design-patterns-for-e-commerce/ By  Dr. Martin Loetzsch  ( Project A ) and Krešimir Slugan ( Contorion ) Providing users with a proper on-site search user ...",t:"On-Site Search "},"236":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/naive_product_centric_approach.html",a:"A Naive Product Centric Approach Finding products on e-commerce website can be tricky, even when you know exactly what you are looking for. Throughout this document, we will assume a customer wants to buy a hammer that weighs 2kg. A product that would meet his needs might be this “Fäustel” by ...",t:"A Naive Product-Centric Approach"},"237":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/usage_driven_schema_structure.html",a:"Both the schema and the query generator should not need to know that there is such a thing as as the weight of a hammer. We will argue for a document structure and schema design that is not built around the original data but around the usage of attributes in search operations.\n\n At Contorion, this ...",t:"Usage-Driven Schema \u0026 Document Structure"},"238":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/generic_faceted_search.html",a:"Faceted search (sometimes also called faceted navigation) allows users to navigate through a web site by applying filters for categories, attributes, price ranges and so on. It’s probably the most basic feature of a search and users expect this to work. Unfortunately, we observed that this is also ...",t:"Generic Faceted Search"},"239":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/full_text_search.html",a:"Full-text search is a feature where a user enters arbitrary text into a search field and then gets documents that are relevant for that query. It is normally combined with faceted navigation. In the example below, a user searched for “hammer” and then further filtered for hammer weights of 2000 gram ...",t:"Full-Text Search"},"240":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/multi_term_auto_completion.html",a:"Term completion is a feature where a user gets suggestions for search terms and matching search results as he types the query. We call a completion multi-term when it is able to combine terms from different attributes in an open-ended fashion. In the below example, a user entered “fortis” (a brand) ...",t:"Multi-Term Auto Completion"},"241":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/simple_spelling_suggestions.html",a:"Spelling suggestions provide the users with alternative search terms when the search query does not return any results:\n Translation: Unfortunately there were 0 results for your exact search term “hammer holk”. Did you possibly mean hammer holz? This is one of the simplest features you can build ...",t:"Simple Spelling Suggestions"},"242":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/data_driven_ranking.html",a:"When a query returns hundreds or thousands of results, it is absolutely crucial that the products at the top of the search result page are the ones that are most relevant to the user. Getting this right will lead to a higher conversion probability and increase customer happiness. Implementing proper ...",t:"Data-Driven Ranking"},"243":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/personalization_dymanic_pricing.html",a:"Especially in businesses with a B2B focus, customers expect to get discounts after they have been using the service/website for a longer period of time. The search infrastructure should be able to handle such use cases and customers should be able to see their own discounted prices while browsing ...",t:"Personalization: Dynamic Pricing"},"244":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/search_design/other_best_practices.html",a:"Finally, we want to provide you with a list of some additional and potentially useful principles regarding the setup of an on-site search experience.\n \nIndex Pages, Not Products\n\n Each document we put in Elasticsearch corresponds to an URL  The mapping type in our schema is called page, not product ...",t:"Other Best Practices"},"245":{i:0.00105856321645294,u:"../developing_with_spryker/guidelines/code_style_guide.html",a:"We follow the  PSR-2 standards . To achieve a styled codebase we integrated the well known  PHP-CS Fixer  and  PHPCodeSniffer .\n Code Sniffer and Fixer \nWe ships with a very powerful tool to help keeping the code clean and preventing simple mistakes. Automate code style correction The sniffer can ...",t:"Code Style Guide"},"246":{i:0.00195834816666759,u:"../developing_with_spryker/guidelines/secure_coding_practices.html",a:"Unsafe coding practices can make the software application vulnerable to theft of sensitive data.\n\nIn this article, we’ll present a series of coding practices that we recommend using when developing an e-commerce application using Spryker Commerce OS, that will keep your software solution secured.\n\n ...",t:"Secure Coding Practices"},"247":{i:0.00108855604812676,u:"../developing_with_spryker/developer_resources/about_resources.html",a:"This section contains general information and resources for developers. The topics covered in resources are general topics that do not pertain to a specific component or capability.   To navigate through content, click on an option from the right-hand table of contents or use the search (above).  ...",t:"About Resources"},"248":{i:0.00128350945400661,u:"../developing_with_spryker/developer_resources/code_generator.html",a:"The CodeGenerator module can generate your project code.  Out of the box it provides generators for Yves, Zed, Client and Shared.\n\n This is a pre-release.\n Installation\n Install it as\n\n composer require --dev spryker/code-generator You need to run vendor/bin/console transfer:generate now.\n\n Then ...",t:"Code Generator"},"249":{i:0.00265697100775071,u:"../developing_with_spryker/developer_resources/configuration_management.html",a:"Default and local configuration files\n Under config/Shared you’ll find several files that are used for the system’s configuration, that can be used by both Yves and Zed.\n The files are merged in a fixed order if they exist. So the entries of config_default.php are overwritten by the entries in ...",t:"Configuration Management"},"250":{i:0.0105244279615091,u:"../developing_with_spryker/developer_resources/console_commands.html",a:"We provide an integrated mechanism to add command line calls. Technically this is based on Symfony’s Console Component.\n\t\t \n\t\t\tGet a list of all available commands\n\t\t You can see the list of all of the commands by running: vendor/bin/console. vagrant@spryker-vagrant ➜  current git:(develop) ✗ ...",t:"Console Commands"},"251":{i:0.00105856321645294,u:"../developing_with_spryker/developer_resources/container_globals.html",a:"The ContainerGlobals is a way to inject dependencies which are available inside your  Factories . Every dependency added to the ContainerGlobals is available by using getProvidedDependency() in your factory.\n \nTo add something globally you need to create a service provider and add it to the ...",t:"Container Globals"},"252":{i:0.00118710392362646,u:"../developing_with_spryker/developer_resources/core_extension.html",a:"We offer several ways like plugins to hook into the core’s behavior and extend this without modifications. But sometimes this is not enough, so you need to replace a method which is deep in the core.\n\n Before your proceed, double check if there is no other way to solve your requirement, maybe there ...",t:"Core Extension"},"253":{i:0.00371853589320929,u:"../developing_with_spryker/developer_resources/cronjob_scheduling.html",a:"We use  Jenkins  for cronjob scheduling. Compared to Crontab, there are several benefits: Jobs are queued and can be manually executed Job definitions are under version control and can be changed by any developer Console output available for debugging Add a new job and run it Jobs are defined in ...",t:"Cronjob Scheduling"},"254":{i:0.00105856321645294,u:"../developing_with_spryker/developer_resources/dependency_injector.html",a:"The  Dependency Provider  defines which “external dependencies” you need to retrieve(e.g. a facade of another module).\n \nThe DependencyInjector is the opposite of it. This class will push dependencies into another module without the need to touch the module where it injects to ( OCP ).\n\n For ...",t:"Dependency Injector"},"255":{i:0.00236409346683228,u:"../developing_with_spryker/developer_resources/dependency_provider.html",a:"Each modules ships with a DependencyProvider class which explicitly defines services and external dependencies to other modules. For instance when the Cms module requires the Glossary module this needs to be configured here. The DependencyProvider defines dependencies for each layer. Usually you ...",t:"Dependency Provider"},"256":{i:0.00697996373801077,u:"../developing_with_spryker/developer_resources/factory.html",a:"All modules are shipped with a dedicated factory for each layer. The responsibility of the factory is to create new instances of the classes from the same layer and module.\n\n The following example shows a typical method from a factory. The method createKeyBuilder() creates an instance which is then ...",t:"Factory"},"257":{i:0.00105856321645294,u:"../developing_with_spryker/developer_resources/flash_messenger.html",a:"This tutorial describes how to show a message in the Zed GUI.\n In the controller you can use these shortcut methods to show a user message in the GUI. The messages will be translated later when they are rendered.\n\n \u003c?php\nclass IndexController extends AbstractController\n{\n    public function ...",t:"Flash Messenger"},"258":{i:0.00105856321645294,u:"../developing_with_spryker/developer_resources/internal_server_error_handling.html",a:"This document describes how to configure the behavior when an internal server error occurs. Whether you need to show the details of the error or render a static page for any internal error, this is done through configuration.\n\n Configure Internal Server Error  Page\nDepending on the environment on ...",t:"Internal Server Error Handling"},"259":{i:0.00208836621684107,u:"../developing_with_spryker/developer_resources/performance_scalability.html",a:"Spryker OS was built to enable the development of high performance e-commerce applications that are able to support an extremely high number of unique visitors. However, no application can be both, light and heavy, at the same time.\n\n Therefore, we have two applications: Yves and Zed. Both ...",t:"Performance and Scalability"},"260":{i:0.00105856321645294,u:"../developing_with_spryker/developer_resources/plugin.html",a:"Plugins are small classes that are used to connect bundles in a flexible and configurable way. In contrast to a direct call to a facade of another module, there can be an array of provided modules.\n\n According to our conventions, plugins are the only classes that can be directly instantiated in ...",t:"Plugin"},"261":{i:0.00129637005387083,u:"../developing_with_spryker/developer_resources/service.html",a:"Service is a Spryker application layer shared by the Client application layer and the Zed application layer. This service layer provides the ability to register a service once and have it applied to both layers. Usage is focused on level details (infrastructure layer). For example: encoding, text ...",t:"Service"},"262":{i:0.00105856321645294,u:"../developing_with_spryker/developer_resources/session_handlers.html",a:"We provide a number of session handlers to work with different storages. By default, the demo-shop uses a locking Redis session handler for Yves and a non-locking Redis session handler for Zed in the development environment.\n\n The following session handlers are currently available:\n\n File\n ...",t:"Session Handlers"},"263":{i:0.00273150998416093,u:"../developing_with_spryker/developer_resources/transfer_objects.html",a:"Transfer objects are simple data containers. Their purpose is to retrieve a standardized way to access data and to get more expressive method signatures. They are available everywhere in the system. How to use transfer objects Simple usage The example shows a typical use case for a transfer object. ...",t:"Transfer Objects"},"264":{i:0.00220192513482916,u:"../developing_with_spryker/state_machine_cookbook/state_machine_cookbook.html",a:"State machines are a model of computation used to automate processes. In Spryker you can use the OMS module to automate the management of orders or the StateMachine module to automate other processes you define in your shop. Both behave similar, but the OMS one is a customized solution to manage the ...",t:"State Machine Cookbook - Part I - State Machine Fundamentals"},"265":{i:0.00376278699726936,u:"../developing_with_spryker/state_machine_cookbook/state_machine_cookbook_2.html",a:"\nThis chapter will help you model a state machine using Spryker to manage your sale orders.\n First of all, it’s important to know which tasks must be executed after an order is submitted and in which order. Keep in mind that you can define more than one state machine in your system to cover the use ...",t:"State Machine Cookbook - Part 2 -Building a State Machine"},"266":{i:0.00201018805545724,u:"../developing_with_spryker/store_administration_guide/store_administration_guide.html",a:"The  features list  will give you an overview of what the Spryker Commerce OS offers and prospective extensions that you can add in your development process. Next, user manuals for the back-office application (Zed) are offered. The manuals include all bundles that are available to configure, namely ...",t:"Store Administration"},"267":{i:0.00221244498541352,u:"../developing_with_spryker/store_administration_guide/bg_category.html",a:"A product category is a way to organize the products in your shop by the type of products you sell. The product categories can be created and update using the dedicated section in the back-office user interface. Category assigning A product can be assigned to one or more product categories. Next, we ...",t:"Category"},"268":{i:0.00127214735294069,u:"../developing_with_spryker/store_administration_guide/bg_cms.html",a:"In the back-office application there is a dedicated section that enables you to create pages, blocks, as well as configuring URL redirects. Both pages and blocks use Twig templates that must be already created. To find out more on how to use the Content Management System, please follow the following ...",t:"CMS"},"269":{i:0.0084798870805046,u:"../developing_with_spryker/store_administration_guide/bg_customer.html",a:"Customer data can be managed either by the shop owner from the back-office application (Zed) or by the customer from the shop interface (Yves). When managing customer data from the back-office application, you can add personal information like name and email address, as well as customer billing and ...",t:"Customer"},"270":{i:0.00292023807683971,u:"../developing_with_spryker/store_administration_guide/discounts/bg_discounts.html",a:"In Spryker, there are two types of discounts that can be defined : Vouchers To redeem this type of discount, the customer must enter a voucher code. Similar to cart rules discount, the discount is applied only if the linked decision rules are satisfied and if it’s active and valid. Cart Rules This ...",t:"Discounts"},"271":{i:0.00167912150324853,u:"../developing_with_spryker/store_administration_guide/discounts/bg_discounts_creating_voucher.html",a:"The creation of a voucher consists of 4 steps: Define the general information (e.g. name, validity period) Define the rules and items on which the discount should be applied Define when to apply the discount Generate the voucher codes that can be used by the customers to redeem the discount Create ...",t:"Creating a Discount Voucher"},});