define({"361":{i:0.00107618791332621,u:"../enablement/migration_guides/mg_transfer.html",a:"Upgrading from version 2.* to version 3.* When upgrading to the new major version of the Transfer module, it is necessary to make sure that everywhere a $foo-\u003efromArray($bar-\u003etoArray()) statement is used the types are matching. From now on we are no longer silently ignoring when you try to set a ...",t:"Migration Guide - Transfer"},"362":{i:0.00107618791332621,u:"../enablement/migration_guides/mg_wishlist.html",a:"Upgrading from version 2.* to version 3.*\n If you’re migrating the Wishlist module from version 2 to version 3, you need to follow the steps described below.\n\n Version 3 of the Wishlist module introduced new schema, and old tables have to be deleted while new created.\n\n First you need to drop old ...",t:"Migration Guide - Wishlist"},"363":{i:0.00137413079419971,u:"../enablement/tutorials/tutorials.html",a:"Tutorials are instructions that describe an entire process from pointy to point including information about performing several tasks. We provide tutorials for the following: Onboarding - Tutorials that describe how to perform basic tasks Backend - Zed related tasks Frontend - Yves related tasks ...",t:"Tutorials"},"364":{i:0.0013048793689709,u:"../enablement/tutorials/backend/t_add_navigation_zed.html",a:"used to be: http://spryker.github.io/tutorials/zed/add-navigation/ This tutorial describes how to make your new controller action accessible in the navigation bar. There are two locations where you can define the navigation config : In the global config/Zed/navigation.xml config file Within your ...",t:"Tutorial - Adding Navigation in Zed"},"365":{i:0.00337586937338529,u:"../enablement/tutorials/backend/t_add_new_bundle.html",a:"In this tutorial we will create a test module: HelloWorld module; the module’s functionality is to show a ‘Hello world!’ message to the user.\n\n   When a new concept needs to be defined, a new module needs to be added on the project side to encapsulate that concept. The new module needs to follow the ...",t:"Tutorial - Adding a New module"},"366":{i:0.00161519945328805,u:"../enablement/tutorials/backend/t_calculator_plugin.html",a:"used to be: http://spryker.github.io/tutorials/zed/calculator-plugin/ This tutorial explains how to add new calculation plugin to the calculator stack. Requirement : display the tax amount per item. Right now, you can get the tax amount from grandTotal. For this, you have to add a new calculator ...",t:"Tutorial - Calculator Plugin"},"367":{i:0.00107618791332621,u:"../enablement/tutorials/backend/t_console_commands.html",a:"A console command is a PHP class that contains the implementation of a functionality that can get executed from the command line. Spryker offers a wrapper over Symfony’s Console component, that makes the implementation and configuration of a console command easier. Implementing a New Console Command ...",t:"Tutorial - Console Commands"},"368":{i:0.00107618791332621,u:"../enablement/tutorials/backend/t_create_table_view.html",a:"used to be: http://spryker.github.io/tutorials/zed/create-table-view/ This tutorial explains how to retrieve data from the database and render it in a table. Prerequisites: You have created a new module ( Tutorial - Adding a New module ). Create a QueryContainer Create the QueryContainer class in ...",t:"Tutorial - Creating a Table View"},"369":{i:0.00107618791332621,u:"../enablement/tutorials/backend/t_customer_import.html",a:"used to be: http://spryker.github.io/tutorials/zed/import-customers/ This tutorial describes the steps you need to follow in order to extend the Importer module functionality. In this example, we’ll import customer data; of course you can update the code in this tutorial to fit your need. Customer ...",t:"Tutorial - Customer Import"},"370":{i:0.00107618791332621,u:"../enablement/tutorials/backend/t_database_transactions.html",a:"Used to be: http://spryker.github.io/tutorials/zed/database-transaction-handling/ To reduce boilerplate code and properly handle database transactions you can use Spryker\\Zed\\PropelOrm\\Business\\Transaction\\DatabaseTransacti onHandlerTrait.\n\n Usage\n To use database transactions in the ...",t:"Tutorial - Database Transaction Handling"},"371":{i:0.00199095373590499,u:"../enablement/tutorials/backend/t_extend_db_schema.html",a:"used to be: http://spryker.github.io/tutorials/zed/extending-database-schema/ Fields can be added to the existing database tables, but they cannot be removed (removing fields from the tables could break the functionalities implemented in Spryker Core). As an example, we will add a description field ...",t:"Tutorial - Extending the Database Schema"},"372":{i:0.00217390690042075,u:"../enablement/tutorials/backend/t_extend_spryker.html",a:"used to be: http://spryker.github.io/tutorials/zed/extending-spryker/ To extend the Spryker-Core functionality and to use the Spryker Engine to develop a project, it’s important to understand the folder structure used in Spryker. The project consists of two parts : Spryker-Core and project ...",t:"Tutorial - Extending Spryker"},"373":{i:0.00107618791332621,u:"../enablement/tutorials/backend/t_internationalization.html",a:"used to be: http://spryker.github.io/tutorials/zed/internationalization/ Challenge When running international business it is important to fine tune the behavior of a shop depending on the country. Topics that differ: Design \u0026 Layout Currency \u0026 price Tax calculation Languages Expense calculation ...",t:"Tutorial - Internationalization"},"374":{i:0.00107618791332621,u:"../enablement/tutorials/backend/t_new_relic_monitoring.html",a:"Spryker enables integration with New Relic for performance monitoring. New Relic contains a set of powerful features that helps you monitor the performance and health of your application. To be able to use New Relic you must first get an account. Next you will need to install the New Relic PHP ...",t:"Tutorial - New Relic Monitoring"},"375":{i:0.00107618791332621,u:"../enablement/tutorials/challenges/t_boosting_cart_based_search.html",a:"Used to be: https://spryker.github.io/challenge/cart-based-search-boosting/ Challenge Description Based on the colors of the products that are in the cart of the user, the catalog should display products first, which have the same color. Let’s say for example that there’s a red product in the cart, ...",t:"Tutorial - Boosting Cart Based Search"},"376":{i:0.00107618791332621,u:"../enablement/tutorials/challenges/t_cms.html",a:"used to be: http://spryker.github.io/challenge/cms/ Challenge Description Create a static Contact Us page and integrate it into Yves. Then create your own template and use it. Challenge Solving Highlights Static page For creating a static page, follow the steps: Go to Zet UI and open the  CMS Pages  ...",t:"Tutorial - CMS"},"377":{i:0.00107618791332621,u:"../enablement/tutorials/challenges/t_dynamic_content_page.html",a:"used to be: http://spryker.github.io/challenge/dynamic-content/ Challenge Description Create a CMS page that displays some (marketing) text and a list of personalized products as offers. Challenge Solving Highlights Static page For creating a CMS page, follow the steps: Create a CMS template called ...",t:"Tutorial - Dynamic Content Page"},"378":{i:0.00107618791332621,u:"../enablement/tutorials/challenges/t_hello_world.html",a:"used to be: http://spryker.github.io/challenge/hello-world/ Challenge Description Build a HelloWorld module in Yves that will render the Hello world! string on the page. Manually building the HelloWorld module in Yves  Using Code Generator To save even more time, you can use code generator from ...",t:"Tutorial - Hello World"},"379":{i:0.00107618791332621,u:"../enablement/tutorials/challenges/t_oms_state_machine.html",a:"Challenge Description Create a simple state machine that demonstrates an order process. The simple order process has the following states: new, paid, shipped, closed, returned, and invalid. We use the invalid state in case a payment is unauthorized (could be used with some other cases as well). In ...",t:"Tutorial - OMS State Machine"},"380":{i:0.00107618791332621,u:"../enablement/tutorials/challenges/t_zed_rest_api.html",a:"used to be: http://spryker.github.io/challenge/zed-restapi/ Challenge Description Spryker-based shop exposes module business logic through a simple API in Zed. The API is self-documented and can be easily explored for each module. Bonus challenge Create a simple client library to authorize and talk ...",t:"Tutorial - Zed Rest API"},"381":{i:0.00107618791332621,u:"../enablement/tutorials/frontend/t_add_button_table.html",a:"used to be: http://spryker.github.io/tutorials/yves/adding-buttons-to-tables/ Depending on the button type that needs to be added (Update/Create/Remove/View), the following operations can be called : \u003c?php\n$this-\u003egenerateCreateButton(\u0027destination_URL\u0027, \u0027Button title\u0027, array ...",t:"Tutorial - Adding Buttons to Tables"},"382":{i:0.00107618791332621,u:"../enablement/tutorials/frontend/t_optimizing_search_boosting.html",a:"used to be: http://spryker.github.io/tutorials/yves/search-boosting/ Spryker provides a convenient way to search product data. You’re enabled to easily setup full-text and facet search. In this tutorial we will show you how to optimize the search results you get by configuring boosts. Why use boost? ...",t:"Tutorial - Optimizing Search Results with Boosting"},"383":{i:0.00140207404873434,u:"../enablement/tutorials/frontend/t_search_.html",a:"used to be: http://spryker.github.io/tutorials/yves/search/ Spryker provides a convenient way to search product data. You’re enabled to easily setup full-text and facet search. In this tutorial we will show how to implement a simple product search using Spryker. This tutorial will not cover all ...",t:"Tutorial - Search"},"384":{i:0.00107618791332621,u:"../enablement/tutorials/frontend/t_search_custom_setup.html",a:"used to be: http://spryker.github.io/tutorials/yves/search-custom-setup/ There might be instances when you need to go beyond product search or you have very specific requirements regarding search. You’re not tied to the basic mapping that ships with Spryker. You can easily roll your own and set up ...",t:"Tutorial - Search Custom Setup"},"385":{i:0.00199095373590499,u:"../enablement/tutorials/frontend/t_search_product_attributes.html",a:"used to be: http://spryker.github.io/tutorials/yves/search-product-attributes/ There’s a built-in way to easily provide product attribute data for the search. Product attributes are stored as simple JSON encoded objects. Spryker provides a number of so called operations to be performed on these ...",t:"Tutorial - Search Product Attributes"},"386":{i:0.00182076747500135,u:"../enablement/tutorials/frontend/t_transfer_data_yves_zed.html",a:"Used to be: http://spryker.github.io/tutorials/yves/communication-yves-zed/ Yves gets most of its data from the client-side NoSQL data stores(data such as product details, product categories, prices, etc.). There are situations in which Yves needs to communicate with Zed either to submit data(e.g.: ...",t:"Tutorial - Transfering Data Between Yves and Zed"},"387":{i:0.00130297909818815,u:"../enablement/tutorials/frontend/t_twig_extensions.html",a:"used to be: http://spryker.github.io/tutorials/yves/twig-extensions/ As an example on how to implement a Twig extension, we’ll build a filter which can be used on displaying prices. Implement the filter Add the Twig extension Register the new Twig extension Test your Twig extension Implement the ...",t:"Tutorial - Twig Extensions"},"388":{i:0.00120686874512318,u:"../enablement/tutorials/frontend/t_using_translations.html",a:"used to be: http://spryker.github.io/tutorials/yves/using-translations/ The data stored in the key-value storage can be used for multiple purposes: URL mappings localized product details localized product categories details Translations - Using Twig Translator Twig Translator uses the data that ...",t:"Tutorial - Using Translations"},"389":{i:0.00107618791332621,u:"../enablement/tutorials/frontend/t_working_filter_facets.html",a:"used to be: http://spryker.github.io/tutorials/yves/working-with-filter-facets/ A search engine is one of the most important functionalities in an online shops because it facilitates a better navigation, allowing the user to get to the products that are in his interest. The search engine should ...",t:"Tutorial - Working with Filter Facets"},"390":{i:0.00819001963657872,u:"../enablement/tutorials/frontend/t_working_forms.html",a:"used to be: http://spryker.github.io/tutorials/yves/working-with-forms/  Spryker uses Symfony forms; this tutorial will help you get started on working with forms. You will build a simple newsletter subscription form that contains a field for entering the email address and a submit button. Follow ...",t:"Tutorial - Working with Forms"},"391":{i:0.00717375796182836,u:"../enablement/tutorials/frontend/t_working_tables.html",a:"  Spryker has a dedicated component to help you build tables for the Zed UI. This tutorial will help you get started on working with tables. Creating a New Table Configure the Table Prepare the Data Render the Table Creating a New Table To get started defining the new table, create a new class in ...",t:"Tutorial - Working with Tables"},"392":{i:0.00107618791332621,u:"../enablement/tutorials/frontend/t_yves_bootstrap.html",a:"used to be: http://spryker.github.io/tutorials/yves/yves-bootstrapping/ Yves and Zed are both built upon the  Silex micro-framework . So most concepts about modern web frameworks apply here as well. In static/public/Yves/index.php you will find the entry for the front-end application. ...",t:"Tutorial - Yves Bootstrapping"},"393":{i:0.00107618791332621,u:"../enablement/tutorials/onboarding/t_checkout.html",a:"Challenge Description Integrate an additional step into the checkout process; a Voucher step where a customer enters a voucher code and gets a discount. Add the Voucher step after the Payment one. To explore further before starting, you can read about the  Checkout  and the  StepEngine  bundles. ...",t:"Tutorial: Checkout"},"394":{i:0.00107618791332621,u:"../enablement/tutorials/onboarding/t_hello_spryker.html",a:"TODO: Optimize the internal links in this page used to be: http://spryker.github.io/onboarding/hello-spryker/ This is an architecture walkthrough as a coding exercise. Challenge Description Build a HelloSpryker module in Zed that will render the Hello Spryker! string, in reverse order, on the ...",t:"Tutorial: Hello Spryker"},"395":{i:0.00107618791332621,u:"../enablement/tutorials/onboarding/t_oms_invoice_state_machine.html",a:"used to be: http://spryker.github.io/onboarding/state-machine/ Challenge Description Build a simple state machine that creates an invoice payment process. Add dummy commands and conditions and integrate it into checkout. Challenge Solving Highlights For this challenge, it was asked to create a state ...",t:"Tutorial: OMS Invoice State Machine"},"396":{i:0.00107618791332621,u:"../enablement/tutorials/onboarding/t_product_challenge.html",a:"used to be: http://spryker.github.io/onboarding/product/ Challenge Description Add information to the products regarding the country where the product is being produced (e.g.: Made in “China”). Don’t add this information as an attribute. Display this information in the product details page in Yves. ...",t:"Tutorial: Product"},"397":{i:0.00107618791332621,u:"../enablement/tutorials/onboarding/t_product_challenge_solution.html",a:"used to be: http://spryker.github.io/onboarding/product-solution/ ProductCountry module (Zed) First, you need to create a new table with the name spy_product_country. This table will be filled with demo data provided by a hard coded sku/country list in the ImportController of the module. File: ...",t:"Tutorial: Product Challenge Solution"},"398":{i:0.00319141711557341,u:"../enablement/tutorials/onboarding/t_stores.html",a:"used to be: http://spryker.github.io/onboarding/stores/ Challenge Description Override a Zed core module on project level, and then override it on store level. You can also repeat the same challenge for a Yves module. Challenge Solving Highlights Project Level Let’s first override on the project ...",t:"Tutorial: Stores"},"399":{i:0.00137413079419971,u:"../enablement/videos___webinars/videos.html",a:"Videos",t:"Videos"},"400":{i:0.00107618791332621,u:"../print_only_topics/toc.html",a:"Table of Contents",t:"Table of Contents"},"401":{i:0.00107618791332621,u:"../print_only_topics/copyright.html",a:"2017 Spryker Systems GmbH. All rights reserved. Information in this document is subject to change without notice. The software described in this document is furnished under a license agreement or nondisclosure agreement. The software may be used or copied only in accordance with the terms of those ...",t:"Copyright"},"402":{i:0.00107618791332621,u:"../print_only_topics/appendix.html",a:"Here is some general text for a topic. Replace this with your own content. Here is some general text for a topic. Replace this with your own content. Here is some general text for a topic. Replace this with your own content. Here is some general text for a topic. Replace this with your own content. ...",t:"Appendix"},"403":{i:0.00107618791332621,u:"../developing_with_spryker/3rd-party_integration/payolution/integration_payment_payolution.html",a:"﻿",t:"integration_payment_payolution"},"404":{i:0.00107618791332621,u:"../getting_started/system_requirements_small_production.html",a:"Small Production Environment System Requirements This is a draft waiting for approval to publish https://docs.google.com/document/d/1YUOGNSEYVRtd5aOzetWE4Pa2OirC9luRX0xzXvGqEqQ/edit#heading=h.9ols8j8dt095  ",t:"Small Production Environment System Requirements"},"405":{i:0.00107618791332621,u:"../partner_page.html",a:"[add the name of the partner\u0027s product in the title and add - Partner Page. for example the title will be MindLab - Partner Page   Partner Name, Logo, link to website Company short description list and link to the user guidance information Support info: who to contact if there is a bug/issue   ...",t:"Partner Page"},"406":{i:0.00107618791332621,u:"../what_s_new/releases/release_notes_may_1_2017.html",a:"Features Product Groups The Product Groups feature allows to group together multiple abstract products for various reasons. One of the most common use cases of this feature is to group same products with different colors together to make user’s browsing experience more convenient. Once products are ...",t:"Release Notes - May - 1 2017"},"407":{i:0.00107618791332621,u:"../print_only_topics/title.html",a:"Spryker Systems GmbH User Guide A Version 1.0",t:"Title"},"408":{i:0.0014847841792668,u:"../what_s_new/releases/release_notes_april_1_2017.html",a:"﻿",t:"release_notes_april_1_2017"},"409":{i:0.00107618791332621,u:"../print_only_topics/glossary.html",a:"GLOSSARY",t:"Glossary"},"410":{i:0.0013048793689709,u:"../developing_with_spryker/3rd-party_integration/payolution/integration_payment_payolution_installment.html",a:"Installment Scenarios\n Standard Case\n Full Refund\n  \n\nPartial Refund\n Integrating Payolution Installment Payment\n The In order to integrate installment payment, two simple steps are needed: set Payolution installment payment configuration and call the facade functions.\n\n Set Payolution Installment ...",t:"Installment Payment - Payolution"},"411":{i:0.00241403455107657,u:"../developing_with_spryker/3rd-party_integration/payolution/integration_payment_payolution_requests.html",a:"﻿",t:"integration_payment_payolution_requests"},"412":{i:0.0015335708246156,u:"../developing_with_spryker/store_administration_guide/shipment/bg_shipment_creating_carrier.html",a:"Creating a Carrier Company - Shipment",t:"Creating a Carrier Company - Shipment"},"413":{i:0.00107618791332621,u:"../print_only_topics/index.html",a:"INDEX",t:"Index"},"414":{i:0.00107618791332621,u:"../developing_with_spryker/3rd-party_integration/ratepay/payment_integration_ratepay.html",a:"﻿",t:"payment_integration_ratepay"},"415":{i:0.00107618791332621,u:"../disclaimer.html",a:"Urheber \u0026 Haftungsausschluss für Publikationen Veröffentlicht in Berlin von der: Spryker Systems GmbH Julie-Wolfthorn-Strasse 1 10115 Berlin – DEUTSCHLAND eMail:  info@spryker.com Telefon: +49 (0) 30 208498351 Der Inhalt dieser Publikation ist unverbindlich und dient ausschließlich ...",t:"Disclaimer"},"416":{i:0.00107618791332621,u:"../index.html",a:"Planning to use Spryker? All you need to know about using and setting up the Spryker Commerce Operating System. Understanding Spryker Get to know what Spryker is and how you can easily adopt the Commerce OS Framework for building your\n                                    e-commerce presence. Getting ...",t:"Spryker Knowledge"},"417":{i:0.00107618791332621,u:"../developing_with_spryker/store_administration_guide/shipment/bg_shipment.html",a:"The carrier companies that you want to have integrated in the shop can be configured from the back-office UI. For each carrier company you can add one or more shipment methods that you want to enable in the shop. A carrier company refers to a company that provides shipment services (e.g.: DHL, UPS, ...",t:"Shipment"},"418":{i:0.00107618791332621,u:"../testpage.html",a:" ",t:"testpage"},"419":{i:0.00107618791332621,u:"../enablement/howtos/ht_extend_inuse_core.html",a:"This topic describes how to extend a core module that is used by another core module.\n\n Extra consideration must be taken when extending core modules that are already in use by another module. In the following example we will extend the Cart  -\u003e Calculation modules.\n\n Step 1: Modify the Interface ...",t:"HowTo - Extend a Core Module that is Used by Another"},"420":{i:0.00107618791332621,u:"../developing_with_spryker/module_guide/inventory/about_inventory.html",a:"The following modules are used to establish inventory functionality. To navigate through content, click on an option from the right-hand table of contents or use the search (above).  You can also use the back/next buttons to move between items under the same category.  To improve readability, all ...",t:"About Inventory"},"421":{i:0.00120686874512318,u:"../understanding_spryker/product_management.html",a:"Product data is central data for shops. It contains characteristics that describe the product as well as characteristics that define their appearance in the shop. For example, the color of a product is an important information that the customer might need, whereas the weight of the product is needed ...",t:"Product Management"},"422":{i:0.00107618791332621,u:"../print_only_topics/disclaimer.html",a:"Disclaimer Delete this text and replace it with your own content.",t:"Disclaimer"},"423":{i:0.0015335708246156,u:"../developing_with_spryker/store_administration_guide/shipment/bg_shipment_creating_method.html",a:"A shipment method is described by : delivery price (how is the price for a delivery calculated?) delivery time (what’s the estimated time for the delivery?) availability (when is the shipment method available?) Each shipment method has its own specificity, so these 3 aspects must be configured(this ...",t:"Creating a Shipment Method"},"424":{i:0.00107618791332621,u:"../print_only_topics/welcome.html",a:"Here is some general text for a topic. Replace this with your own content. Here is some general text for a topic. Replace this with your own content. Here is some general text for a topic. Replace this with your own content. Here is some general text for a topic. Replace this with your own content. ...",t:"Welcome"},"425":{i:0.0013048793689709,u:"../developing_with_spryker/3rd-party_integration/payolution/integration_payment_payolution_integrating.html",a:"﻿",t:"integration_payment_payolution_integrating"},"426":{i:0.00107618791332621,u:"../enablement/migration_guides/mg_sales_aggregator_migration_console.html",a:"\u003c?php\n/**\n * Copyright © 2017-present Spryker Systems GmbH. All rights reserved.\n * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.\n */\n\nnamespace Pyz\\Zed\\SalesAggregator\\Communication\\Console;\n\nuse Exception;\nuse ...",t:"Migration Guide - SalesAggregator Migration Console Command"},"427":{i:0.0013048793689709,u:"../developing_with_spryker/3rd-party_integration/payolution/integration_payment_payolution_invoice.html",a:"Workflow Scenarios\n Payments from Payolution to Merchant are not included in the sequence diagrams since they occur on a regular basis (e.g. every week).\n\n Standard Case\n Full Refund Before Payment Partial Refund Before Payment\n Full Refund After Payment\n Partial Refund After Payment\n Integrating ...",t:"Invoice Payment - Payolution"},});