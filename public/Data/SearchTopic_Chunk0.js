define({"0":{i:0.00107618791332621,u:"../what_s_new/whats_new.html",a:"Used to be http://spryker.github.io/getting-started/whats-new/ TODO: Make an overview of the What\u0027s new section and insert the sections of this page into expanding content. The following page is a monthly report of what’s new and what has changed in the Spryker Framework. January 2017 - Release #2 ...",t:"What\u0027s New"},"1":{i:0.00107618791332621,u:"../what_s_new/releases/releases.html",a:"This section contains the notes for each release made by Spryker. Make sure you check this section from time-to-time to  stay up to date with the improvements, bug fixes and new features that are delivered by our team. What\u0027s Next: Checking for newer versions Release notes Migration guides  ",t:"Releases"},"2":{i:0.00144209424235772,u:"../what_s_new/releases/release_notes.html",a:"On this page you can find the latest release notes and archived content.  Due to the nature of the Spryker OS, we have releases once or twice a month. For more information about our release process see:  Atomic Releases Latest Release Notes - April - 2 2017 Release Notes - April - 1 2017 Archive ...",t:"Release Notes"},"3":{i:0.00207179849707211,u:"../what_s_new/releases/release_notes_april_2_2017.html",a:"Features Multiple Wishlists Generated Directory Removal Beta: Data Feeds Improvements Twig Cache Warmup Zed Navigation Fix Bugfixes Features Multiple Wishlists This release introduces core functionality to support multiple wishlist handling in Yves. It is now possible to create multiple wishlists in ...",t:"Release Notes - April - 2 2017"},"4":{i:0.00107618791332621,u:"../what_s_new/roadmap.html",a:"Used to be http://spryker.github.io/roadmap/ Updated: 03-April2017\n We at Spryker are happy to share our plans with you. Our plans are guidelines that give us direction, that move us forward to continuously evolve and improve our product. However, we are also flexible and we constantly listen and ...",t:"Roadmap"},"5":{i:0.00107618791332621,u:"../understanding_spryker/understanding_spryker.html",a:"Spryker is a Commerce Operating System that provides the end-to-end functionality needed to create a fully-functional commercial online presence for any entity in need of a modular, high-performing and scalable web presence. Spryker OS stands out as an industry leader in Commerce solutions thanks to ...",t:"Understanding Spryker OS"},"6":{i:0.00120686874512318,u:"../understanding_spryker/about_spryker.html",a:"New/Draft The Spryker Commerce Framework is a PHP based framework for creating sophisticated e-commerce web platforms.\n This extendable framework is used build business-driven web applications such B2C shops, marketplaces, shopping clubs, B2B platforms and more.\n Clear growth paths and modularity ...",t:"About Spryker"},"7":{i:0.00107618791332621,u:"../understanding_spryker/about_academy.html",a:"Spryker Academy is a central hub for documentation, knowledge and information.  Here you can choose where to go based on your level of knowledge and what you want to do: What\u0027s New, contains information about past and future releases. Understanding Spryker is for people who are thinking about ...",t:"About Spryker Academy"},"8":{i:0.00437343366265955,u:"../understanding_spryker/atomic_releases.html",a:"Spryker OS Release Process Spryker OS comprises more than 100 modules that offer a large collection of functionality.  Our Demoshop is project archetype that demonstrates how the modules are integrated. But what happens if you don’t need all the modules? The problem with many systems is that they ...",t:"Atomic Releases"},"9":{i:0.00120686874512318,u:"../understanding_spryker/code_quality.html",a:"Spryker OS’s code base receives very high scores in terms of quality measures, indicating significantly higher code quality than many other ecommerce solutions.\n \nCode Quality Spryker, PHPmetrics.org score in score points (x out of 100)\n\n The Results\n Maintainability: keeping code \u0026 architecture ...",t:"Code Quality"},"10":{i:0.00293491513163167,u:"../understanding_spryker/definition_api.html",a:"Used to be: http://spryker.github.io/release/definition-of-api/ According to  Semantic Versioning  the Spryker OS core team releases a major version “when there are incompatible API changes”. To make a sound decision about the type of the version, we need to define our internal APIs.\n \nIn Spryker ...",t:"Definition of API"},"11":{i:0.0015335708246156,u:"../understanding_spryker/faq.html",a:"Click on a question or click the expand all button from the top right side of the page. What is Spryker?  Spryker is an operating system in much the same way as MacOS orIOS are systems: it offers functionality relevant to the world of commerce and capabilities in capsulated units, allowing users to ...",t:"FAQ"},"12":{i:0.00142076855798953,u:"../understanding_spryker/feature_list.html",a:"Used to be: http://spryker.github.io/store-administration/features-list/ This page needs to be reviewed as to what the exact purpose is and if the generation process can be optimised. The Spryker Commerce OS, provides you with the necessary features to build a solid base for your new web shop.\n\n  ...",t:"Feature List"},"13":{i:0.00107618791332621,u:"../understanding_spryker/getting_support.html",a:"Used to be: http://spryker.github.io/help/ If you need help, you should consult this section.  Here you will find answers to the most frequently asked question.  If you don’t find an answer to your question, please feel free to contact us: we are happy to help you.\n\n Browse section\n FAQ  - ...",t:"Getting Support"},"14":{i:0.0012678531332951,u:"../understanding_spryker/planning_to_use.html",a:"Planning to use Spryker OS Thank you for your interest in the Spryker OS.    ",t:"Planning to use Spryker OS"},"15":{i:0.00107618791332621,u:"../understanding_spryker/product_management/product_management.html",a:"Product data is central data for shops. It contains characteristics that describe the product as well as characteristics that define their appearance in the shop. For example, the color of a product is an important information that the customer might need, whereas the weight of the product is needed ...",t:"Product Management"},"16":{i:0.0013048793689709,u:"../understanding_spryker/product_management/product_management_attribute.html",a:"Creating and managing product attributes is the first step in enriching your product data. It is an essential part of maintaining and improving the online shop for your customers. Attributes can serve different purposes and are therefore stored in different ways. They may be used not only for ...",t:"Product Attribute Management"},"17":{i:0.0013048793689709,u:"../understanding_spryker/product_management/product_management_hierarchies.html",a:"Abstract and Concrete Products (Variants)\n Spryker OS’s data structure for products allows to design a product hierarchy, which Yves relies on to display products in the correct way. Every product consists of an abstract product and one or more concrete products, also called variants. Your customers ...",t:"Product Hierarchies - Product Management"},"18":{i:0.0013048793689709,u:"../understanding_spryker/product_management/product_management_information.html",a:"Creating a product in Spryker OS In Spryker OS products can be imported or created with the PIM. Creating the product with the PIM starts by defining an abstract product with all its information and then to go on to creating the different variants of this product. This workflow exists because the ...",t:"Product Information Management"},"19":{i:0.0013048793689709,u:"../understanding_spryker/product_management/product_management_options.html",a:"Product options can be used to create product additions that can be sold with the actual product. They don’t have stock, but a SKU that links to a product. They cannot be bought without buying the corresponding product. Examples for product options are insurances or gift wrapping. Both can only ...",t:"Product Options"},"20":{i:0.0015335708246156,u:"../understanding_spryker/shared_links.html",a:"Shared Links Used to be: http://spryker.github.io/shared-links/  ",t:"Shared Links"},"21":{i:0.00120686874512318,u:"../understanding_spryker/twelve_factor_app.html",a:"The Twelve Factor Application is a methodology defined by Heroku co-founder Adam Wiggins, that contains a set of twelve principles for building modern web-based software applications.\n\n We’ll go through the 12 factors to exemplify how a project built using Spryker OS can follow this set of ...",t:"Twelve Factor App"},"22":{i:0.00113717230149813,u:"../getting_started/getting_started.html",a:"Used to be http://spryker.github.io/getting-started/ If you are visiting this section, you are ready to install and work with Spryker OS.  To begin working with Spryker OS, start with the  Installation Guide . The Installation Guide contains the steps and instructions to follow to completely setup ...",t:"Getting Started"},"23":{i:0.00717375796182836,u:"../getting_started/debugging/debugging_setup.html",a:"Used to be: http://spryker.github.io/getting-started/installation/debugging-setup/ This article describes how to setup debugging in your development environment.  To configure debugging for old version of the VM prior 91,  click here . \n\nInstalling the Xdebug module To install Xdebug run: sudo -i ...",t:"Debugging Setup"},"24":{i:0.00717375796182836,u:"../getting_started/debugging/debugging-setup-prior-vm91.html",a:"Used to be: http://spryker.github.io/getting-started/installation/debugging-setup-prior-vm91/ To configure debugging for the current VM,  click here . This article describes how to setup debugging in your development environment for VM prior verion 91.\n\n Install Xdebug module\n If you don’t have the ...",t:"Debugging Setup for VM prior version 91"},"25":{i:0.00107618791332621,u:"../getting_started/concept_overview.html",a:"Used to be http://spryker.github.io/getting-started/overview/ Spryker is a Commerce Operating System composed of two applications: Yves and Zed.\n\n Yves\tFront-end-presentation layer for customers, based on  Silex .\n Zed\tApplication that contains all business logic and the backend GUI also based on ...",t:"Conceptual Overview"},"26":{i:0.00107618791332621,u:"../getting_started/configure_database_server.html",a:"Used to be: http://spryker.github.io/getting-started/installation/database-configuration/ This article describes how you can change your database server.\n\n Spryker offers support for using MySQL or PostgreSQL as database servers. By default, the virtual machine is configured to use the PostgreSQL ...",t:"Configuring the Database Server"},"27":{i:0.00107618791332621,u:"../getting_started/environment_setup.html",a:"Environment Setup",t:"Environment Setup"},"28":{i:0.00139838890836597,u:"../getting_started/installation_guide.html",a:"Used to be http://spryker.github.io/getting-started/installation/guide/ Spryker Commerce OS is delivered as a VM (virtual machine).  All service installations such as database or PHP modules are already included in the VM. To install the Spryker  Commerce OS  for development: 1. Prepare Vagrant: To ...",t:"Installation Guide"},"29":{i:0.00107618791332621,u:"../getting_started/installation_guide_no_vm.html",a:"Used to be: http://spryker.github.io/getting-started/installation/guide-no-vm/ This guide will help you install Spryker\u0027s Demoshop without using the virtual machine that we offer.\n Minimum requirements:\n\n PHP v5.6.x\n Graphviz v2.x\n Nginx or Apache\n Redis v1.x\n Elasticsearch v1.x\n PostgreSQL v9.x\n ...",t:"Installation Guide - No VM"},"30":{i:0.00107618791332621,u:"../getting_started/security_audit.html",a:"used to be: http://spryker.github.io/getting-started/security-audit-results/ A security audit was performed on our Commerce OS between February 9 and March 30 2016. The audit was conducted by  SektionEins . The evaluation of the Commerce OS was done without having prior knowledge of the source code, ...",t:"Security Audit"},"31":{i:0.00107618791332621,u:"../getting_started/system_requirements.html",a:"System Requirements",t:"System Requirements"},"32":{i:0.00107618791332621,u:"../getting_started/technology_stack.html",a:"Used to be http://spryker.github.io/getting-started/technology-stack/ Spryker is an e-commerce Commerce OS developed in PHP, that promotes SOLID principles and clean code. It’s purpose is to facilitate rapid development in building a customized solution for an e-commerce business.\n\n Technologies ...",t:"Technology Stack"},"33":{i:0.00199270840079669,u:"../getting_started/troubleshooting.html",a:"Used to be: http://spryker.github.io/getting-started/installation/troubleshooting/ Click on an issue to see how to Troubleshoot Peer authentication failed for user postgres If you get the error below while running ./setup, on the Setup Zed step: Zed Exception: RuntimeException - psql: FATAL:  Peer ...",t:"Troubleshooting"},"34":{i:0.00107618791332621,u:"../getting_started/vm_cleanup.html",a:"Used to be: http://spryker.github.io/getting-started/installation/virtual-machine-cleanup/ If you need to cleanup the environment set up in the virtual machine, you can either do this by running a script or execute the cleanup steps manually.\n\n VM Cleanup - Automatic To cleanup the VM: Run the setup ...",t:"Virtual Machine Cleanup"},"35":{i:0.00139838890836597,u:"../developing_with_spryker/develping_with_spryker.html",a:"This section contains information and resources for developers working on and implementing their online presence with Spryker OS.    To navigate through content, click on an option from the right-hand table of contents or use the search (above).  You can also use the back/next buttons to move ...",t:"Developing with Spryker OS"},"36":{i:0.00113717230149813,u:"../developing_with_spryker/module_guide/modules.html",a:"A module is a group of files (PHP classes, test classes, configuration files, CSS files, etc) that refer to one concept and it’s written in a way that it makes it usable by other modules. Modules can be logically divided into categories where some are mandatory and necessary for running the OS and ...",t:"Module Guide"},"37":{i:0.00110231231832943,u:"../developing_with_spryker/module_guide/checkout_process/checkout_process.html",a:"The following modules are used to establish cart, checkout and sales functionality. To navigate through content, click on an option from the right-hand table of contents or use the search (above).  You can also use the back/next buttons to move between items under the same category.  To improve ...",t:"Cart \u0026 Checkout \u0026 Sales"},"38":{i:0.00301425417313682,u:"../developing_with_spryker/module_guide/checkout_process/calculation/calculation.html",a:"Spryker uses the Calculation module to calculate the cart totals that are displayed in the cart/checkout or when the order is placed.\nIts also used to recalculate order totals after refund.\n The calculation module extensively uses plugins to inject calculation algorithms.\n How Calculation Works ...",t:"Calculation"},"39":{i:0.00429437507977069,u:"../developing_with_spryker/module_guide/checkout_process/calculation/calculation_data_structure.html",a:"The following diagram illustrates the Calculation data structure. https://www.gliffy.com/go/share/image/s10i1vjqws97tfgk4bi0.png?utm_medium=live-embed\u0026utm_source=custom   Quote Transfer\n QuoteTransfer is the main data transfer object used in Cart, Calculation, Checkout and when order is placed. This ...",t:"Calculation Data Structure"},"40":{i:0.00129661381007544,u:"../developing_with_spryker/module_guide/checkout_process/calculation/calculation_plugins.html",a:"\nCalculator plugins are registered in the CalculationDependencyProvider::getCalculatorStack() for QuoteTransfer and CalculationDependencyProvider::getOrderCalculatorPluginStack() for OrderTransfer.  This method can be extended on the project level and the plugin stack can be updated with your own ...",t:"Calculator Plugins"},"41":{i:0.00224881972031044,u:"../developing_with_spryker/module_guide/checkout_process/calculation/calculation_3_0.html",a:"Spryker uses the Calculation module to calculate the cart totals that are displayed in the cart/checkout or when the order is placed.\n\n The calculation module extensively uses plugins to inject calculation algorithms.\n How Calculation Works Quote Transfer\n\n The quote transfer object is used to store ...",t:"Calculation 3.0"},"42":{i:0.0017305381282463,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout.html",a:"used to be: http://spryker.github.io/core/bundles/checkout/ Yves Step Processing Checkout in Spryker demoshop uses a StepEngine step process to navigate customer step by step through checkout. The checkout process creates a generic approach for step processing; each step knows how to handle the form ...",t:"Checkout"},"43":{i:0.00123962883459469,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_quote_trans_lifetime.html",a:"When a process is being called on StepProcess, it will try to get the current valid step by walking through the step stack and calling the postCondition() for each, starting from the first in the stack. If postCondition() is being called on StepProcess, it will try to get the current valid step by ...",t:"Checkout Quote Transfer Lifetime"},"44":{i:0.00123962883459469,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_form_submission.html",a:"On form submission, the same processing starts with the difference that if form submit is detected then the validation is called: if the form is invalid then view will be rendered with validation errors if form data is valid, then execute() is called on step that executes the step related logic. ...",t:"Checkout Form Submission"},"45":{i:0.00123962883459469,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_how_wired.html",a:"In order to use checkout in Yves it should be correctly configured and dependencies should be provided. Each step can have a form, a controller action, the implementation of the step logic and Twig template to render the HTML. Forms - current step form collection. Controller action - the action that ...",t:"How Things are Wired Together - Checkout"},"46":{i:0.00123962883459469,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_how_quote_trans_mapped.html",a:"Symfony forms provide a mechanism to store data into objects without having the need of a manual mapping. It’s called  Data transformers . There are a few important things to make this work. Because we are passing the entire QuoteTransfer, the form handler does not know which fields are you trying ...",t:"How the Quote Transfer is Mapped Inside Forms - Checkout"},"47":{i:0.00826319298159782,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_steps.html",a:"Entry Step Redirect customer to correct step based on QuoteTransfer state. This step requires input = false so it won’t be rendered. Customer Step The customer step provides three forms (login, register and register as a guest). This step is responsible of filling CustomerTransfer with corresponding ...",t:"Checkout Steps"},"48":{i:0.00123962883459469,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_step_interface.html",a:" #\n  \u003c?php\n  interface StepInterface\n  {\n\t/**\n\t * Requirements for this step, return true when satisfied.\n\t *\n\t * @param QuoteTransfer $quoteTransfer\n\t *\n\t * @return bool\n\t */\n\tpublic function preCondition(QuoteTransfer $quoteTransfer);\n\t/**\n\t * Require input, should we render view with form or just ...",t:"Checkout Step Interface"},"49":{i:0.00123962883459469,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_step_ext_red_interface.html",a:" #\n  \u003c?php\n  interface StepWithExternalRedirectInterface extends StepInterface\n  {\n\t/**\n\t * Return external redirect url, when redirect occurs not within same application. Used after execute.\n\t *\n\t * @return string\n\t */\n\tpublic function getExternalRedirectUrl();\n  }",t:"Step with External Redirect Interface - Checkout"},"50":{i:0.0191300943807036,u:"../developing_with_spryker/module_guide/checkout_process/checkout/checkout_placing_the_order.html",a:"After the customer clicks the submit button during the SummaryStep, the PlaceOrderStep is started. This step takes the QuoteTransfer` and starts the checkout workflow to store the order into the system. Zed Checkout modulecontains a number of plugins where you can add additional behavior, check ...",t:"Placing the Order - Checkout"},"51":{i:0.00250282740992266,u:"../developing_with_spryker/module_guide/checkout_process/oms/oms.html",a:"used to be: http://spryker.github.io/core/bundles/oms/ Many start ups in the eCommerce world have gone through an automation approach of their order processing as described by Fabian Wesner in his blog post ( Introduction to Automated Order Management for E-commerce Startups ). They have started ...",t:"OMS"},"52":{i:0.0032036075480665,u:"../developing_with_spryker/module_guide/checkout_process/oms/patterns.html",a:"Process Patterns used to be: http://spryker.github.io/oms/state-machine-patterns/ The  State Machine Cook Book  describes how to build a state machine with the elements state, transition and event. However there are some recurring design problems that are needed in many processes. In this article ...",t:"State Machine Patterns"},"53":{i:0.00795552357092415,u:"../developing_with_spryker/module_guide/checkout_process/refund/refund.html",a:"Refund Refund manages the retour refund process. Overview RefundFacade contains the following methods: calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) calculates refundable amount for the sales order saveRefund(RefundTransfer $refundTransfer) persists the calculated refund ...",t:"Refund"},"54":{i:0.00579194578499133,u:"../developing_with_spryker/module_guide/checkout_process/refund/refund_2_0.html",a:"The Refund module manages the retours refund process. Overview Using  Refund  Extending  Refund  Overview RefundFacade contains the following methods: calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) calculates refundable amount for the sales order ...",t:"Refund 2.0"},"55":{i:0.0131427791560861,u:"../developing_with_spryker/module_guide/checkout_process/sales/sales.html",a:"used to be: http://spryker.github.io/core/bundles/sales/ The Sales module provides the order management functionality. The functionality is obtained through the ZED UI that renders orders with orders details and the Client API to get customer orders. Getting totals for order To get the Order with ...",t:"Sales"},"56":{i:0.0122457757431692,u:"../developing_with_spryker/module_guide/checkout_process/sales/sales_5_0.html",a:"used to be: http://spryker.github.io/core/bundles/sales/ Getting totals for order Spryker does not store order grand total or subtotal amounts; all amounts are stored before calculation, order items store single item gross amounts, discounts store single item discount amount. To get the discount ...",t:"Sales 5.0"},"57":{i:0.00125477328875923,u:"../developing_with_spryker/module_guide/checkout_process/shipment/shipment.html",a:"used to be: http://spryker.github.io/core/bundles/shipping/ Shipping details can be configured from Zed backend application and are being managed by the Shipment module. Zed enables the basic operations (Create/Update/Delete) for carriers and it allows to update the list of shipping methods assigned ...",t:"Shipment"},"58":{i:0.00160947024382971,u:"../developing_with_spryker/module_guide/checkout_process/shipment/shipment_methods_plugins.html",a:"The main concerns regarding shipping services are : delivery time : when will the order be delivered ? price : how is the delivery price calculated ? availability : is the shipping service available to deliver the order? For each of these concerns, a plugin is linked to each shipping method : ...",t:"Shipment Methods Plugins"},"59":{i:0.00160947024382971,u:"../developing_with_spryker/module_guide/checkout_process/shipment/shipment_overview.html",a:"The main concepts regarding shipping that are modeled in the database are : shipment carrier shipment method The shipment method is linked to the sales order. The schema below shows how these entities are modeled in the database : ...",t:"Shipment Overview"},"60":{i:0.00227494412531367,u:"../developing_with_spryker/module_guide/checkout_process/cart.html",a:"Used to be: http://spryker.github.io/core/bundles/cart/ Our Cart consists of few components in Yves and Zed. The components from Yves are responsible of creating the cart request and of persisting the cart into the session. The components from Zed part persist the data into the database and expand ...",t:"Cart"},"61":{i:0.00110231231832943,u:"../developing_with_spryker/module_guide/checkout_process/dummy_payment.html",a:"used to be: http://spryker.github.io/core/bundles/dummy-payment/ Do not use this code for production but you can use it as a starting point for new payment integrations. What is the DummyPayment for: it brings a simple state machine it shows how to integrate payment into the system it shows how to ...",t:"Dummy Payment"},"62":{i:0.0098014523120633,u:"../developing_with_spryker/module_guide/content_management/cms/cms.html",a:"Content Management System The content management system (CMS) is a lightweight tool used for publishing, editing and modifying the content displayed in Yves. In Spryker, the CMS manages content such as pages and blocks and keeps tracks of URL redirects. You can immediately start using the content ...",t:"CMS"},"63":{i:0.00934805831577224,u:"../developing_with_spryker/module_guide/content_management/cms/cms_creating_new_page.html",a:"To demonstrate how to add a new page in Yves using the CMS, we will create a page with contact information in the demo shop. Adding a template for the new ‘Contact Us’ page Create a new Twig template under the src/Pyz/Yves/Cms/Theme/demoshop/template/ folder. We’ll call it contact_page.twig and it ...",t:"CMS - Creating a New Page"},"64":{i:0.00898253086082513,u:"../developing_with_spryker/module_guide/content_management/cms/cms_glossary.html",a:"CMS Glossary ",t:"CMS Glossary "},"65":{i:0.00934805831577224,u:"../developing_with_spryker/module_guide/content_management/cms/cms_how_to_use_blocks.html",a:"Blocks can be viewed as partial pages that can be embedded in other pages.  There are 3 types of blocks : Static blocks Category blocks Product blocks - TBD Static blocks In order to get familiar with how to use blocks, please follow the steps described below, that will add a block with a hello ...",t:"How to Use Blocks - CMS"},"66":{i:0.00934805831577224,u:"../developing_with_spryker/module_guide/content_management/cms/cms_url_redirects.html",a:"URL Redirects - CMS URL redirects can be configured from the CMS interface. You must specify the URL you need to redirect, the new URL and the status code which plays a major role for search engines.",t:"URL Redirects - CMS"},"67":{i:0.00898253086082513,u:"../developing_with_spryker/module_guide/content_management/cms/cms_versions.html",a:"With CMS Versioning, you can manage all changes for a CMS page.  You can Compare CMS versions, Rollback or discard changes to a page.  To view versioning for a CMS page, click Version History from the top of the page. Rollback to CMS Version By selecting previous CMS versions you will be able to ...",t:"CMS Versioning"},"68":{i:0.00110231231832943,u:"../developing_with_spryker/module_guide/content_management/glossary/glossary.html",a:"Used to be: http://spryker.github.io/core/bundles/glossary/ The Glossary module has the responsibility to manage glossary keys that hold the localized content in the database. For each entry in the glossary keys table there is a corresponding entry in the Touch table that has a timestamp that marks ...",t:"Glossary"},"69":{i:0.00138851183154479,u:"../developing_with_spryker/module_guide/content_management/glossary/glossary_keys.html",a:"Glossary keys present two layers of persistence: SQL database storage in-memory key-value storage (Redis) In this section we’ll exemplify the usage of the functionality for managing the glossary keys from the backoffice user interface and the usage of them for the Yves interface through twig ...",t:"Managing Glossary Keys"},"70":{i:0.00138851183154479,u:"../developing_with_spryker/module_guide/content_management/glossary/glossary_keys_use.html",a:"One of the usages of the glossary keys in the front office application (Yves) is for rendering translated content. For allowing to render translated content, a dedicated extension for the twig template engine is available to be used. You can see bellow how you can add translated content in Yves  ...",t:"Using Glossary Keys"},"71":{i:0.00138851183154479,u:"../developing_with_spryker/module_guide/content_management/glossary/glossary_translations.html",a:"The key concept for rendering web pages with translated content very fast and with limited resource usage is using a key-value storage. Yves has no connection to Zed’s SQL database and it fetches all dynamic data from a key-value storage(Redis) and a search engine(Elasticsearch). This data contains ...",t:"How Translations are Managed - Glossary"},"72":{i:0.00107618791332621,u:"../developing_with_spryker/module_guide/customer_management/customer/about_customer.html",a:"The following modules are used to establish customer centric functionality. To navigate through content, click on an option from the right-hand table of contents or use the search (above).  You can also use the back/next buttons to move between items under the same category.  To improve readability, ...",t:"About Customer"},});